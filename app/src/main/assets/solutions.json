[
  {
    "title": "713. Subarray Product Less Than K",
    "description": "Find the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k",
    "category": "Prefix Sum",
    "code": "if (k <= 1) return 0\nvar left = 0\nvar right = 0\nvar count = 0\nvar prefix = 1\n\nwhile (right < nums.size) {\n    prefix *= nums[right]\n\nwhile (prefix >= k) {   \nprefix /= nums[left]\n   left++\n}\n\ncount += (right - left) + 1\nright++\n}\n\nreturn count"
  },
  {
    "title": "547. Number of Provinces",
    "description": "Find the number of directly or indirectly connected cities in an adjacency matrix where check[i][j] == 1 indicates connection",
    "category": "Matrix Traversal",
    "code": "val size = isConnected.size\nval end = size - 1\nval visitedCities = BooleanArray(size) { false }\nvar connections = 0\n\n  fun checkNeighbor(city: Int) {\n    for (neighbor in 0..end) {\n      if (isConnected[city][neighbor] == 1 && !visitedCities[neighbor]) {\n        visitedCities[neighbor] = true\n        checkNeighbor(neighbor)\n      }\n    }\n  }\n\n  for (city in 0..end) {\n     if (!visitedCities[city]) {\n      connections++\n      visitedCities[city] = true\n      checkNeighbor(city)\n    }\n  }\n        \nreturn connections"
  },
  {
    "title": "2043. Simple Bank System",
    "description": "Create a simple bank class checking valid transactions",
    "category": "Simulation",
    "code": "class Bank(balance: LongArray) {\n    private val tracker = mutableMapOf<Int, Long>()\n\n    init {\n        balance.forEachIndexed { index, value ->\n            tracker[index + 1] = value\n        }\n    }\n\n    fun transfer(account1: Int, account2: Int, money: Long): Boolean {\n        if (!isValidAccount(account1) || !isValidAccount(account2)) return false\n        if (tracker[account1]!! < money) return false\n\n        tracker[account1] = tracker[account1]!! - money\n        tracker[account2] = tracker[account2]!! + money\n        return true\n    }\n\n    fun deposit(account: Int, money: Long): Boolean {\n        if (!isValidAccount(account)) return false\n        tracker[account] = tracker[account]!! + money\n        return true\n    }\n\n    fun withdraw(account: Int, money: Long): Boolean {\n        if (!isValidAccount(account)) return false\n        if (tracker[account]!! < money) return false\n\n        tracker[account] = tracker[account]!! - money\n        return true\n    }\n\n    private fun isValidAccount(account: Int): Boolean {\n        return account in tracker.keys\n    }\n}"
  },
  {
    "title": "49. Group Anagrams",
    "description": "From a list of strings, group the anagrams together in a list of list of strings",
    "category": "Hash table",
    "code": "fun groupAnagrams(strs: Array<String>): List<List<String>> {\n    val result = mutableMapOf<String, MutableList<String>>()\n\n    strs.forEach { str ->\n        val anagramStr = str.toCharArray().sorted().joinToString(\"\")\n        result.getOrPut(anagramStr) { mutableListOf() }.add(str)\n    }\n\n    return result.values.toList()\n}"
  },
  {
    "title": "348. Design Tic-Tac-Toe",
    "description": "Return if a player won after a move",
    "category": "Prefix Sum",
    "code": "class TicTacToe(n: Int) {\n\n    val rows = IntArray(n) { 0 }\n    val columns = IntArray(n) { 0 }\n    var diagonal = 0\n    var antidiagonal = 0\n\n    fun move(row: Int, col: Int, player: Int): Int {\n        if (player == 1) {\n            rows[row] += 1\n            columns[col] += 1\n        } else {\n            rows[row] -= 1\n            columns[col] -= 1\n        }\n\n        if (row == col) {\n            if (player == 1) {\n                diagonal += 1\n            } else {\n                diagonal -= 1\n            }\n        }\n\n        if (row + col == rows.size - 1) {\n            if (player == 1) {\n                antidiagonal += 1\n            } else {\n                antidiagonal -= 1\n            }\n        }\n\n        if (valueIsWin(rows[row]) || valueIsWin(columns[col]) || valueIsWin(diagonal) || valueIsWin(\n                antidiagonal\n            )\n        ) {\n            return player\n        }\n\n        return 0\n    }\n    \n    private fun valueIsWin(value: Int) = abs(value) == rows.size\n}"
  },
  {
    "title": "1020. Number of Enclaves",
    "description": "Check if 1s (land) are surrounded by 0s (water)",
    "category": "Depth first search",
    "code": "fun numEnclaves(grid: Array<IntArray>): Int {\n    val rowSize = grid.size\n    val colSize = grid[0].size\n    var trapped = 0\n    val visited = Array(rowSize) { BooleanArray(colSize) { false } }\n\n    fun isAtEdge(row: Int, col: Int): Boolean {\n        if (row < 0 || row >= rowSize || col < 0 || col >= colSize) {\n            return true\n        }\n        return false\n    }\n\n    fun trapped(row: Int, col: Int): Boolean {\n        if (visited[row][col] || grid[row][col] == 0) {\n            return true\n        }\n        return false\n    }\n\n    fun checkOnePath(row: Int, col: Int): Pair<Boolean, Int> {\n        if (isAtEdge(row, col)) return Pair(true, 0)\n        if (trapped(row, col)) return Pair(false, 0)\n\n        visited[row][col] = true\n        var touchesBoundary = false\n        var count = 1\n\n        val directions = listOf(\n            Pair(1, 0), Pair(-1, 0), Pair(0, 1), Pair(0, -1)\n        )\n\n        for ((dx, dy) in directions) {\n            val (touches, cnt) = checkOnePath(row + dx, col + dy)\n            if (touches) touchesBoundary = true\n            count += cnt\n        }\n\n        return Pair(touchesBoundary, count)\n    }\n\n    for (rowIndex in grid.indices) {\n        for (colIndex in 0..<grid[rowIndex].size) {\n            val node = grid[rowIndex][colIndex]\n            if (!visited[rowIndex][colIndex] && node == 1) {\n                val (valid, count) = checkOnePath(rowIndex, colIndex)\n                if (!valid) {\n                    // count all of the ones\n                    trapped += count\n                }\n            }\n        }\n    }\n\n    return trapped\n}"
  },
  {
    "title": "39. Combination Sum",
    "description": "Find all combinations of ints that add up to given target, dupes allowed",
    "category": "Backtracking",
    "code": "fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\n    // backtracking - \"candidate\"\n    val result = mutableListOf<List<Int>>()\n\n    fun checkSum(state: MutableList<Int>, sum: Int, index: Int) {\n        when {\n            sum == target -> result.add(state.toList())\n            sum > target -> return\n            else -> {\n                for (i in index..candidates.size - 1) {\n                    state.add(candidates[i])\n                    checkSum(state, sum + candidates[i], i)\n                    state.removeAt(state.size - 1)\n                }\n            }\n        }\n    }\n\n    checkSum(mutableListOf(), 0, 0)\n\n    return result.toList()\n}"
  },
  {
    "title": "3076. Shortest Uncommon Substring in an Array",
    "description": "Find the shortest uncommon substring in an array of strings",
    "category": "Trie",
    "code": "fun shortestSubstrings(arr: Array<String>): Array<String> {\n    val substrings = mutableMapOf<String, MutableSet<Int>>()\n    val result = mutableListOf<String>()\n\n    for (i in arr.indices) {\n        val str = arr[i]\n        // store the seen substrings\n        val seen = mutableSetOf<String>()\n        // build the map so that the substring is mapped to which string it was in\n        for (start in str.indices) {\n            for (end in start+1..str.length) {\n                val sub = str.substring(start, end)\n                if (seen.add(sub)) {\n                    substrings.getOrPut(sub) { mutableSetOf() }.add(i)\n                }\n            }\n        }\n    }\n\n    for (i in arr.indices) {\n        var min: String? = null\n        substrings.entries.forEach { (sub, indices) ->\n            if (indices.size == 1 && indices.contains(i)) {\n                if (min == null || sub.length < min!!.length || (sub.length == min!!.length && sub < min!!)) {\n                    min = sub\n                }\n            }\n        }\n        result.add(min ?: \"\")\n    }\n\n    return result.toTypedArray()\n}"
  }
]