[
  {
    "title": "713. Subarray Product Less Than K",
    "description": "Find the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k",
    "category": "Prefix Sum",
    "code": "if (k <= 1) return 0\nvar left = 0\nvar right = 0\nvar count = 0\nvar prefix = 1\n\nwhile (right < nums.size) {\n    prefix *= nums[right]\n\nwhile (prefix >= k) {   \nprefix /= nums[left]\n   left++\n}\n\ncount += (right - left) + 1\nright++\n}\n\nreturn count"
  },
  {
    "title": "547. Number of Provinces",
    "description": "Find the number of directly or indirectly connected cities in an adjacency matrix where check[i][j] == 1 indicates connection",
    "category": "Matrix Traversal",
    "code": "val size = isConnected.size\nval end = size - 1\nval visitedCities = BooleanArray(size) { false }\nvar connections = 0\n\n  fun checkNeighbor(city: Int) {\n    for (neighbor in 0..end) {\n      if (isConnected[city][neighbor] == 1 && !visitedCities[neighbor]) {\n        visitedCities[neighbor] = true\n        checkNeighbor(neighbor)\n      }\n    }\n  }\n\n  for (city in 0..end) {\n     if (!visitedCities[city]) {\n      connections++\n      visitedCities[city] = true\n      checkNeighbor(city)\n    }\n  }\n        \nreturn connections"
  },
  {
    "title": "2043. Simple Bank System",
    "description": "Create a simple bank class checking valid transactions",
    "category": "Simulation",
    "code": "class Bank(balance: LongArray) {\n    private val tracker = mutableMapOf<Int, Long>()\n\n    init {\n        balance.forEachIndexed { index, value ->\n            tracker[index + 1] = value\n        }\n    }\n\n    fun transfer(account1: Int, account2: Int, money: Long): Boolean {\n        if (!isValidAccount(account1) || !isValidAccount(account2)) return false\n        if (tracker[account1]!! < money) return false\n\n        tracker[account1] = tracker[account1]!! - money\n        tracker[account2] = tracker[account2]!! + money\n        return true\n    }\n\n    fun deposit(account: Int, money: Long): Boolean {\n        if (!isValidAccount(account)) return false\n        tracker[account] = tracker[account]!! + money\n        return true\n    }\n\n    fun withdraw(account: Int, money: Long): Boolean {\n        if (!isValidAccount(account)) return false\n        if (tracker[account]!! < money) return false\n\n        tracker[account] = tracker[account]!! - money\n        return true\n    }\n\n    private fun isValidAccount(account: Int): Boolean {\n        return account in tracker.keys\n    }\n}"
  },
  {
    "title": "49. Group Anagrams",
    "description": "From a list of strings, group the anagrams together in a list of list of strings",
    "category": "Hash table",
    "code": "fun groupAnagrams(strs: Array<String>): List<List<String>> {\n    val result = mutableMapOf<String, MutableList<String>>()\n\n    strs.forEach { str ->\n        val anagramStr = str.toCharArray().sorted().joinToString(\"\")\n        result.getOrPut(anagramStr) { mutableListOf() }.add(str)\n    }\n\n    return result.values.toList()\n}"
  },
  {
    "title": "348. Design Tic-Tac-Toe",
    "description": "Return if a player won after a move",
    "category": "Prefix Sum",
    "code": "class TicTacToe(n: Int) {\n\n    val rows = IntArray(n) { 0 }\n    val columns = IntArray(n) { 0 }\n    var diagonal = 0\n    var antidiagonal = 0\n\n    fun move(row: Int, col: Int, player: Int): Int {\n        if (player == 1) {\n            rows[row] += 1\n            columns[col] += 1\n        } else {\n            rows[row] -= 1\n            columns[col] -= 1\n        }\n\n        if (row == col) {\n            if (player == 1) {\n                diagonal += 1\n            } else {\n                diagonal -= 1\n            }\n        }\n\n        if (row + col == rows.size - 1) {\n            if (player == 1) {\n                antidiagonal += 1\n            } else {\n                antidiagonal -= 1\n            }\n        }\n\n        if (valueIsWin(rows[row]) || valueIsWin(columns[col]) || valueIsWin(diagonal) || valueIsWin(\n                antidiagonal\n            )\n        ) {\n            return player\n        }\n\n        return 0\n    }\n    \n    private fun valueIsWin(value: Int) = abs(value) == rows.size\n}"
  }
]